// <auto-generated />
using System;
using Elections.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Elections.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Elections.Models.Candidate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ElectionsID")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ElectionsID");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Elections.Models.Elections", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPossibleToChangeAVote")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("Elections.Models.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Elections.Models.Problem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VoterPhoneInElectionsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VoterPhoneInElectionsID");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("Elections.Models.ProblemNotes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<string>("VisitorPhoneID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ProblemID");

                    b.ToTable("ProblemNotes");
                });

            modelBuilder.Entity("Elections.Models.Stam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("StamInt")
                        .HasColumnType("int");

                    b.Property<string>("StamString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Stam");
                });

            modelBuilder.Entity("Elections.Models.Voter", b =>
                {
                    b.Property<string>("PhoneID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneID");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("Elections.Models.VoterPhoneInElections", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("ElectionsID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VotingAreaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("ElectionsID");

                    b.HasIndex("VotingAreaID");

                    b.ToTable("VotersPhonesInElections");
                });

            modelBuilder.Entity("Elections.Models.VotingArea", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VotingAreas");
                });

            modelBuilder.Entity("Elections.Models.Candidate", b =>
                {
                    b.HasOne("Elections.Models.Elections", "Elections")
                        .WithMany("Candidates")
                        .HasForeignKey("ElectionsID");

                    b.Navigation("Elections");
                });

            modelBuilder.Entity("Elections.Models.Elections", b =>
                {
                    b.HasOne("Elections.Models.Manager", "Manager")
                        .WithMany("Elections")
                        .HasForeignKey("ManagerID");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Elections.Models.Problem", b =>
                {
                    b.HasOne("Elections.Models.VoterPhoneInElections", "VoterPhoneInElections")
                        .WithMany("Problems")
                        .HasForeignKey("VoterPhoneInElectionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoterPhoneInElections");
                });

            modelBuilder.Entity("Elections.Models.ProblemNotes", b =>
                {
                    b.HasOne("Elections.Models.Problem", "Problem")
                        .WithMany("ProblemNotes")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("Elections.Models.VoterPhoneInElections", b =>
                {
                    b.HasOne("Elections.Models.Candidate", "Candidate")
                        .WithMany("Voters")
                        .HasForeignKey("CandidateID");

                    b.HasOne("Elections.Models.Elections", "Elections")
                        .WithMany("VoterPhoneInElections")
                        .HasForeignKey("ElectionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elections.Models.VotingArea", "VotingArea")
                        .WithMany("Voters")
                        .HasForeignKey("VotingAreaID");

                    b.Navigation("Candidate");

                    b.Navigation("Elections");

                    b.Navigation("VotingArea");
                });

            modelBuilder.Entity("Elections.Models.Candidate", b =>
                {
                    b.Navigation("Voters");
                });

            modelBuilder.Entity("Elections.Models.Elections", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("VoterPhoneInElections");
                });

            modelBuilder.Entity("Elections.Models.Manager", b =>
                {
                    b.Navigation("Elections");
                });

            modelBuilder.Entity("Elections.Models.Problem", b =>
                {
                    b.Navigation("ProblemNotes");
                });

            modelBuilder.Entity("Elections.Models.VoterPhoneInElections", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Elections.Models.VotingArea", b =>
                {
                    b.Navigation("Voters");
                });
#pragma warning restore 612, 618
        }
    }
}
